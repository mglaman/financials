<?php

// Field helpers
use Drupal\financials\Helpers\FinancialsFieldHelper;
use Drupal\financials\Helpers\LineItemCategoryFieldHelper;
use Drupal\financials\Helpers\LineItemAccountFieldHelper;

// Misc
use Drupal\financials\Entity\TransactionLineItem;
use Drupal\financials\Entity\BudgetLineItem;
use Drupal\financials\Displays\AccountTransactions;

/**
 * @file
 * Module file for Financials
 */

define('TRANSACTION_ENTITY', 'commerce_line_item');
define('TRANSACTION_ENTITY_BUNDLE', 'transaction');
define('TRANSACTION_CATEGORY_FIELD', 'financials_transaction_category');
define('TRANSACTION_ACCOUNT_REF_FIELD', 'financials_transaction_account');

define('BUDGET_ENTITY', 'commerce_line_item');
define('BUDGET_ENTITY_BUNDLE', 'budget');
define('BUDGET_CATEGORY_FIELD', 'financials_transaction_category');
define('BUDGET_ACCOUNT_REF_FIELD', 'financials_transaction_account');
define('BUDGET_TYPE_FIELD', 'financials_budget_type');

define('ACCOUNT_STARTING_BALANCE_FIELD', 'financials_starting_balance');
define('ACCOUNT_CURRENT_BALANCE_FIELD', 'financials_current_balance');
define('ACCOUNT_BALANCE_TYPE_FIELD', 'financials_balance_type');

/**
 * Implements hook_menu().
 */
function financials_menu() {
  $menu = array();
  $menu['accounts'] = array(
    'title' => 'Accounts',
    'page callback' => '\Drupal\\financials\\FinancialsPageRouter::loadPage',
    'page arguments' => array(
      '\Drupal\\financials\\Displays\\AccountsOverview',
      'allAccounts',
    ),
    'access arguments' => array('access content'),
    'menu_name' => 'navigation',
  );
  $menu['budget'] = array(
    'title' => 'Budget',
    'page callback' => '\Drupal\\financials\\FinancialsPageRouter::loadPage',
    'page arguments' => array(
      '\Drupal\\financials\\Displays\\BudgetOverview',
      'allBudgetItems',
    ),
    'access arguments' => array('access content'),
    'menu_name' => 'navigation',
  );
  $menu['add/transaction'] = array(
    'title' => 'Add transaction',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'financials_add_transaction_form',
      TransactionLineItem::newStub(),
    ),
    'access arguments' => array('financials add line item'),
    'menu_name' => 'navigation',
    'file' => 'financials.pages.inc',
  );
  $menu['add/budget-item'] = array(
    'title' => 'Add budget item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'financials_add_budget_form',
      BudgetLineItem::newStub(),
    ),
    'access arguments' => array('financials add line item'),
    'menu_name' => 'navigation',
    'file' => 'financials.pages.inc',
  );
  $menu['add/transfer'] = array(
    'title' => 'Add a transfer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'financials_transfer_transaction_form',
    ),
    'access arguments' => array('financials add line item'),
    'menu_name' => 'navigation',
    'file' => 'financials.pages.inc',
  );
  return $menu;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function financials_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'accounts') {
    $item = menu_get_item('node/add/finance-account');
    if ($item['access']) {
      $item['title'] = t('Add account');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
    $item = menu_get_item('add/transaction');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
    $item = menu_get_item('add/transfer');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_permission().
 */
function financials_permission() {
  return array(
    'financials add line item' =>  array(
      'title' => t('Add transaction or budget line items'),
      'description' => t('Allows user to add account transactions or budget items.'),
    ),
  );
}

/**
 * Implements hook_node_info().
 */
function financials_node_info() {
  return array(
    'finance_account' => array(
      'name' => t('Finance account'),
      'base' => 'finance_account',
      'description' => t('Create financial accounts that maintain a balance and have transactions.'),
      'title_label' => t('Account name'),
      'help' => t('Accounts can be credit cards, savings accounts, or even items that are assets (such as property.)')
    )
  );
}

/**
 * Implements hook_form().
 */
function finance_account_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_form_alter().
 */
function financials_form_finance_account_node_form_alter(&$form, &$form_state) {
  $form['options']['#access'] = false;
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function financials_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types[TRANSACTION_ENTITY_BUNDLE] = array(
    'type' => TRANSACTION_ENTITY_BUNDLE,
    'name' => t('Transaction'),
    'description' => t('Transactions performed against accounts.'),
    'product' => false,
    'add_form_submit_value' => t('Add Transaction'),
    'base' => 'financials_transaction_line_item',
  );
  $line_item_types[BUDGET_ENTITY_BUNDLE] = array(
    'type' => BUDGET_ENTITY_BUNDLE,
    'name' => t('Budget Item'),
    'description' => t('Expected expenses throughout a month to define a budget.'),
    'product' => false,
    'add_form_submit_value' => t('Add budget item'),
    'base' => 'financials_budget_line_item',
  );
  return $line_item_types;
}

function financials_transaction_line_item_configuration($line_item_type) {
  field_cache_clear();
  // Transaction term references
  $category_reference = new LineItemCategoryFieldHelper(TRANSACTION_CATEGORY_FIELD, TRANSACTION_ENTITY, TRANSACTION_ENTITY_BUNDLE);
  $category_reference->createField();
  $category_reference->createInstance(t('Transaction Category'));

  // Transaction account node reference
  $account_reference = new LineItemAccountFieldHelper(TRANSACTION_ACCOUNT_REF_FIELD, TRANSACTION_ENTITY, TRANSACTION_ENTITY_BUNDLE);
  $account_reference->createField();
  $account_reference->createInstance(t('Account'));
}

function financials_budget_line_item_configuration($line_item_type) {
  field_cache_clear();
  // Transaction term references
  $category_reference = new LineItemCategoryFieldHelper(BUDGET_CATEGORY_FIELD, BUDGET_ENTITY, BUDGET_ENTITY_BUNDLE);
  $category_reference->createField();
  $category_reference->createInstance(t('Budget Item Category'));

  // Transaction account node reference
  $account_reference = new LineItemAccountFieldHelper(BUDGET_ACCOUNT_REF_FIELD, BUDGET_ENTITY, BUDGET_ENTITY_BUNDLE);
  $account_reference->createField();
  $account_reference->createInstance(t('Account'));

  $budget_type = new FinancialsFieldHelper(BUDGET_TYPE_FIELD, BUDGET_ENTITY, BUDGET_ENTITY_BUNDLE);
  if (!$budget_type->fieldExists()) {
    $settings = array(
      'allowed_values_function' => 'financials_budget_type_field_values',
    );
    $budget_type->createField('list_boolean', 1, $settings);
  }
  if (!$budget_type->instanceExists()) {
    $budget_type->createInstance(t('Transaction type'), array('display_label' => 1), array());
  }
}

function financials_balance_type_field_values() {
  return array(
    t('Debt'),
    t('Asset'),
  );
}

function financials_budget_type_field_values() {
  return array(
    t('Expense'),
    t('Income'),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function financials_field_extra_fields() {
  return array(
    'node' => array(
      'finance_account' => array(
        'display' => array(
          'financials_account_transactions' => array(
            'label' => t('Account transactions'),
            'description' => t('Transactions listed under the account'),
            'weight' => 10,
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_view().
 */
function finance_account_view($node, $view_mode) {
  $output = new AccountTransactions($node->nid);
  $node->content['financials_account_transactions'] = $output->transactionTable();
  return $node;
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Implement access control on line items. This is different from other entities
 * because the access to a line item is totally delegated to its order.
 *
 * @param SelectQuery $query
 */
function financials_query_financials_line_item_access_alter(SelectQuery $query) {
  /** @var EntityFieldQuery $meta */
  $meta = $query->getMetaData('entity_field_query');
  // Read the meta-data from the query.
  if (!$account = $query->getMetaData('account')) {
    /** @var \stdClass $user */
    global $user;
    $account = $user;
  }

  // Base table
  $tables = &$query->getTables();
  reset($tables);
  $base_table = key($tables);

  // Field column (ugly way to get field, but works.
  $field_name = $meta->fields[0]['field_name'];
  $query->innerJoin('node', 'n', '%alias.nid = ' . $base_table . '.'. $field_name . '_target_id');
  $query->condition('n.uid', $account->uid);
}

/**
 * Implements hook_query_TAG_alter().
 *
 * @param SelectQuery $query
 */
function financials_query_entityreference_alter(SelectQuery $query) {
  // Read the meta-data from the query.
  if (!$account = $query->getMetaData('account')) {
    /** @var \stdClass $user */
    global $user;
    $account = $user;
  }
  /** @var EntityFieldQuery $meta */
  $queryMeta = $query->getMetaData('entity_field_query');
  $fieldMeta = $query->getMetaData('field');
  $query->condition('node.uid', $account->uid);

}

/**
 * Implements hook_node_access().
 */
function financials_node_access($node, $op, $account) {
  if (is_string($node)) {
    return NODE_ACCESS_IGNORE;
  }
  if (user_access('administer nodes')) {
    return NODE_ACCESS_ALLOW;
  }
  if ($node->uid == $account->uid) {
    return NODE_ACCESS_ALLOW;
  }
  return NODE_ACCESS_DENY;
}